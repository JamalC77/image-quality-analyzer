{"ast":null,"code":"/**\r\n * Generates a random ID for feedback messages\r\n */\nconst generateMessageId = () => {\n  return Math.random().toString(36).substring(2, 11);\n};\n\n/**\r\n * Analyzes image quality and returns appropriate feedback messages\r\n */\nexport const analyzeImageQuality = (image, config) => {\n  const {\n    quality\n  } = image;\n  const issues = [];\n  let messageType = 'success';\n\n  // Check sharpness\n  if (quality.sharpness < config.sharpnessThreshold) {\n    issues.push('too blurry');\n    messageType = 'error';\n  }\n\n  // Check brightness\n  if (quality.brightness < config.brightnessLowerThreshold) {\n    issues.push('too dark');\n    messageType = messageType === 'success' ? 'warning' : messageType;\n  } else if (quality.brightness > config.brightnessUpperThreshold) {\n    issues.push('too bright');\n    messageType = messageType === 'success' ? 'warning' : messageType;\n  }\n\n  // Check noise\n  if (quality.noise > config.noiseThreshold) {\n    issues.push('too noisy');\n    messageType = messageType === 'success' ? 'warning' : messageType;\n  }\n\n  // Check contrast\n  if (quality.contrast < config.contrastThreshold) {\n    issues.push('low contrast');\n    messageType = messageType === 'success' ? 'warning' : messageType;\n  }\n\n  // Check saturation\n  if (quality.saturation < config.saturationLowerThreshold) {\n    issues.push('under-saturated');\n    messageType = messageType === 'success' ? 'info' : messageType;\n  } else if (quality.saturation > config.saturationUpperThreshold) {\n    issues.push('over-saturated');\n    messageType = messageType === 'success' ? 'info' : messageType;\n  }\n\n  // Create feedback message\n  let message;\n  if (issues.length === 0) {\n    message = 'Good image quality';\n    messageType = 'success';\n  } else if (issues.length === 1) {\n    message = `Image is ${issues[0]}`;\n  } else {\n    const lastIssue = issues.pop();\n    message = `Image is ${issues.join(', ')} and ${lastIssue}`;\n  }\n  return {\n    id: generateMessageId(),\n    message,\n    type: messageType,\n    timestamp: Date.now(),\n    duration: config.feedbackDuration\n  };\n};\n\n/**\r\n * Default configuration for the image analyzer\r\n */\nexport const defaultAnalyzerConfig = {\n  sharpnessThreshold: 60,\n  brightnessLowerThreshold: 30,\n  brightnessUpperThreshold: 70,\n  noiseThreshold: 50,\n  contrastThreshold: 40,\n  saturationLowerThreshold: 30,\n  saturationUpperThreshold: 70,\n  feedbackDuration: 2000,\n  // 2 seconds\n  analysisDelay: 500 // 500 milliseconds\n};","map":{"version":3,"names":["generateMessageId","Math","random","toString","substring","analyzeImageQuality","image","config","quality","issues","messageType","sharpness","sharpnessThreshold","push","brightness","brightnessLowerThreshold","brightnessUpperThreshold","noise","noiseThreshold","contrast","contrastThreshold","saturation","saturationLowerThreshold","saturationUpperThreshold","message","length","lastIssue","pop","join","id","type","timestamp","Date","now","duration","feedbackDuration","defaultAnalyzerConfig","analysisDelay"],"sources":["C:/Users/jamal/OneDrive/Documents/Development/Test Projects/image-quality-analyzer/src/utils/imageAnalyzer.ts"],"sourcesContent":["import { MockImage, ImageQuality, FeedbackMessage, AnalyzerConfig } from '../types';\r\n\r\n/**\r\n * Generates a random ID for feedback messages\r\n */\r\nconst generateMessageId = (): string => {\r\n  return Math.random().toString(36).substring(2, 11);\r\n};\r\n\r\n/**\r\n * Analyzes image quality and returns appropriate feedback messages\r\n */\r\nexport const analyzeImageQuality = (\r\n  image: MockImage,\r\n  config: AnalyzerConfig\r\n): FeedbackMessage => {\r\n  const { quality } = image;\r\n  const issues: string[] = [];\r\n  let messageType: 'error' | 'warning' | 'success' | 'info' = 'success';\r\n  \r\n  // Check sharpness\r\n  if (quality.sharpness < config.sharpnessThreshold) {\r\n    issues.push('too blurry');\r\n    messageType = 'error';\r\n  }\r\n  \r\n  // Check brightness\r\n  if (quality.brightness < config.brightnessLowerThreshold) {\r\n    issues.push('too dark');\r\n    messageType = messageType === 'success' ? 'warning' : messageType;\r\n  } else if (quality.brightness > config.brightnessUpperThreshold) {\r\n    issues.push('too bright');\r\n    messageType = messageType === 'success' ? 'warning' : messageType;\r\n  }\r\n  \r\n  // Check noise\r\n  if (quality.noise > config.noiseThreshold) {\r\n    issues.push('too noisy');\r\n    messageType = messageType === 'success' ? 'warning' : messageType;\r\n  }\r\n  \r\n  // Check contrast\r\n  if (quality.contrast < config.contrastThreshold) {\r\n    issues.push('low contrast');\r\n    messageType = messageType === 'success' ? 'warning' : messageType;\r\n  }\r\n  \r\n  // Check saturation\r\n  if (quality.saturation < config.saturationLowerThreshold) {\r\n    issues.push('under-saturated');\r\n    messageType = messageType === 'success' ? 'info' : messageType;\r\n  } else if (quality.saturation > config.saturationUpperThreshold) {\r\n    issues.push('over-saturated');\r\n    messageType = messageType === 'success' ? 'info' : messageType;\r\n  }\r\n  \r\n  // Create feedback message\r\n  let message: string;\r\n  if (issues.length === 0) {\r\n    message = 'Good image quality';\r\n    messageType = 'success';\r\n  } else if (issues.length === 1) {\r\n    message = `Image is ${issues[0]}`;\r\n  } else {\r\n    const lastIssue = issues.pop();\r\n    message = `Image is ${issues.join(', ')} and ${lastIssue}`;\r\n  }\r\n  \r\n  return {\r\n    id: generateMessageId(),\r\n    message,\r\n    type: messageType,\r\n    timestamp: Date.now(),\r\n    duration: config.feedbackDuration\r\n  };\r\n};\r\n\r\n/**\r\n * Default configuration for the image analyzer\r\n */\r\nexport const defaultAnalyzerConfig: AnalyzerConfig = {\r\n  sharpnessThreshold: 60,\r\n  brightnessLowerThreshold: 30,\r\n  brightnessUpperThreshold: 70,\r\n  noiseThreshold: 50,\r\n  contrastThreshold: 40,\r\n  saturationLowerThreshold: 30,\r\n  saturationUpperThreshold: 70,\r\n  feedbackDuration: 2000,    // 2 seconds\r\n  analysisDelay: 500         // 500 milliseconds\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}