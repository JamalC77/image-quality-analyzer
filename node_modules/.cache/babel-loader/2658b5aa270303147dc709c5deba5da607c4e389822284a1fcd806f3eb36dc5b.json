{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jamal\\\\OneDrive\\\\Documents\\\\Development\\\\Test Projects\\\\image-quality-analyzer\\\\src\\\\components\\\\ImageQualityAnalyzer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { defaultAnalyzerConfig } from '../utils/imageAnalyzer';\nimport ImageGenerator from './ImageGenerator';\nimport ImageAnalyzer from './ImageAnalyzer';\nimport FeedbackDisplay from './FeedbackDisplay';\nimport ImagePreview from './ImagePreview';\n\n// Container for the analyzer UI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyzerContainer = styled.div`\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n_c = AnalyzerContainer;\nconst Header = styled.h1`\n  text-align: center;\n  color: #343a40;\n  margin-bottom: 30px;\n`;\n_c2 = Header;\nconst ControlsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n  gap: 10px;\n`;\n_c3 = ControlsContainer;\nconst ControlButton = styled.button`\n  padding: 8px 16px;\n  background-color: ${props => props.active ? '#007bff' : '#6c757d'};\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s;\n  \n  &:hover {\n    background-color: ${props => props.active ? '#0069d9' : '#5a6268'};\n  }\n  \n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n`;\n\n// Main component\n_c4 = ControlButton;\nconst ImageQualityAnalyzer = ({\n  config = {},\n  generationInterval = 200,\n  enabled = true\n}) => {\n  _s();\n  // Merge default config with provided config\n  const mergedConfig = {\n    ...defaultAnalyzerConfig,\n    ...config\n  };\n\n  // State for the analyzer\n  const [currentImage, setCurrentImage] = useState(null);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [feedbackMessages, setFeedbackMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(enabled);\n\n  // Handler for new generated images\n  const handleImageGenerated = image => {\n    setCurrentImage(image);\n  };\n\n  // Handler for analysis results\n  const handleAnalysisComplete = feedback => {\n    setFeedbackMessages(prev => [...prev, feedback]);\n    setAnalyzing(false);\n  };\n\n  // Toggle analyzer on/off\n  const toggleAnalyzer = () => {\n    setIsRunning(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(AnalyzerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: \"Image Quality Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlsContainer, {\n      children: /*#__PURE__*/_jsxDEV(ControlButton, {\n        active: isRunning,\n        onClick: toggleAnalyzer,\n        children: isRunning ? 'Pause Analyzer' : 'Start Analyzer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImagePreview, {\n      image: currentImage,\n      analyzing: analyzing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageGenerator, {\n      onImageGenerated: handleImageGenerated,\n      interval: generationInterval,\n      enabled: isRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageAnalyzer, {\n      image: currentImage,\n      config: mergedConfig,\n      onAnalysisComplete: handleAnalysisComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      messages: feedbackMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageQualityAnalyzer, \"/f/ZkHLuu6wtxIVoqf/6KwI0fo0=\");\n_c5 = ImageQualityAnalyzer;\nexport default ImageQualityAnalyzer;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"AnalyzerContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"ControlsContainer\");\n$RefreshReg$(_c4, \"ControlButton\");\n$RefreshReg$(_c5, \"ImageQualityAnalyzer\");","map":{"version":3,"names":["React","useState","styled","defaultAnalyzerConfig","ImageGenerator","ImageAnalyzer","FeedbackDisplay","ImagePreview","jsxDEV","_jsxDEV","AnalyzerContainer","div","_c","Header","h1","_c2","ControlsContainer","_c3","ControlButton","button","props","active","_c4","ImageQualityAnalyzer","config","generationInterval","enabled","_s","mergedConfig","currentImage","setCurrentImage","analyzing","setAnalyzing","feedbackMessages","setFeedbackMessages","isRunning","setIsRunning","handleImageGenerated","image","handleAnalysisComplete","feedback","prev","toggleAnalyzer","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onImageGenerated","interval","onAnalysisComplete","messages","_c5","$RefreshReg$"],"sources":["C:/Users/jamal/OneDrive/Documents/Development/Test Projects/image-quality-analyzer/src/components/ImageQualityAnalyzer.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ImageQualityAnalyzerProps, MockImage, FeedbackMessage, AnalyzerConfig } from '../types';\r\nimport { defaultAnalyzerConfig } from '../utils/imageAnalyzer';\r\nimport ImageGenerator from './ImageGenerator';\r\nimport ImageAnalyzer from './ImageAnalyzer';\r\nimport FeedbackDisplay from './FeedbackDisplay';\r\nimport ImagePreview from './ImagePreview';\r\n\r\n// Container for the analyzer UI\r\nconst AnalyzerContainer = styled.div`\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.h1`\r\n  text-align: center;\r\n  color: #343a40;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst ControlsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 20px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst ControlButton = styled.button<{ active?: boolean }>`\r\n  padding: 8px 16px;\r\n  background-color: ${props => props.active ? '#007bff' : '#6c757d'};\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n  \r\n  &:hover {\r\n    background-color: ${props => props.active ? '#0069d9' : '#5a6268'};\r\n  }\r\n  \r\n  &:focus {\r\n    outline: none;\r\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\r\n  }\r\n`;\r\n\r\n// Main component\r\nconst ImageQualityAnalyzer: React.FC<ImageQualityAnalyzerProps> = ({\r\n  config = {},\r\n  generationInterval = 200,\r\n  enabled = true\r\n}) => {\r\n  // Merge default config with provided config\r\n  const mergedConfig: AnalyzerConfig = {\r\n    ...defaultAnalyzerConfig,\r\n    ...config\r\n  };\r\n\r\n  // State for the analyzer\r\n  const [currentImage, setCurrentImage] = useState<MockImage | null>(null);\r\n  const [analyzing, setAnalyzing] = useState<boolean>(false);\r\n  const [feedbackMessages, setFeedbackMessages] = useState<FeedbackMessage[]>([]);\r\n  const [isRunning, setIsRunning] = useState<boolean>(enabled);\r\n\r\n  // Handler for new generated images\r\n  const handleImageGenerated = (image: MockImage) => {\r\n    setCurrentImage(image);\r\n  };\r\n\r\n  // Handler for analysis results\r\n  const handleAnalysisComplete = (feedback: FeedbackMessage) => {\r\n    setFeedbackMessages(prev => [...prev, feedback]);\r\n    setAnalyzing(false);\r\n  };\r\n\r\n  // Toggle analyzer on/off\r\n  const toggleAnalyzer = () => {\r\n    setIsRunning(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <AnalyzerContainer>\r\n      <Header>Image Quality Analyzer</Header>\r\n      \r\n      <ControlsContainer>\r\n        <ControlButton\r\n          active={isRunning}\r\n          onClick={toggleAnalyzer}\r\n        >\r\n          {isRunning ? 'Pause Analyzer' : 'Start Analyzer'}\r\n        </ControlButton>\r\n      </ControlsContainer>\r\n      \r\n      <ImagePreview \r\n        image={currentImage} \r\n        analyzing={analyzing}\r\n      />\r\n      \r\n      {/* Non-visible components */}\r\n      <ImageGenerator \r\n        onImageGenerated={handleImageGenerated}\r\n        interval={generationInterval}\r\n        enabled={isRunning}\r\n      />\r\n      \r\n      <ImageAnalyzer \r\n        image={currentImage}\r\n        config={mergedConfig}\r\n        onAnalysisComplete={handleAnalysisComplete}\r\n      />\r\n      \r\n      <FeedbackDisplay \r\n        messages={feedbackMessages}\r\n      />\r\n    </AnalyzerContainer>\r\n  );\r\n};\r\n\r\nexport default ImageQualityAnalyzer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}