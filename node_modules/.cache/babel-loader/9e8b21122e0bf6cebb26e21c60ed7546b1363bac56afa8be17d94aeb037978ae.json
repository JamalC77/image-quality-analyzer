{"ast":null,"code":"/**\r\n * Generates a random number between min and max (inclusive)\r\n */\nconst getRandomValue = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\r\n * Generates a random ID\r\n */\nconst generateId = () => {\n  return Math.random().toString(36).substring(2, 11);\n};\n\n/**\r\n * Generates random image quality properties\r\n */\nexport const generateRandomImageQuality = () => {\n  return {\n    sharpness: getRandomValue(10, 100),\n    brightness: getRandomValue(20, 80),\n    noise: getRandomValue(0, 100),\n    contrast: getRandomValue(20, 100),\n    saturation: getRandomValue(20, 80),\n    timestamp: Date.now()\n  };\n};\n\n/**\r\n * Generates a mock image with random quality properties\r\n */\nexport const generateMockImage = () => {\n  return {\n    id: generateId(),\n    quality: generateRandomImageQuality()\n  };\n};\n\n/**\r\n * Creates a simple visual representation of image quality metrics\r\n * (This is optional and can be used to generate a visual representation)\r\n */\nexport const createVisualRepresentation = quality => {\n  const canvas = document.createElement('canvas');\n  canvas.width = 200;\n  canvas.height = 200;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return '';\n\n  // Background - darker for more noise\n  const noiseLevel = 255 - quality.noise * 2.55;\n  ctx.fillStyle = `rgb(${noiseLevel}, ${noiseLevel}, ${noiseLevel})`;\n  ctx.fillRect(0, 0, 200, 200);\n\n  // Sharpness - represented by clear lines\n  ctx.strokeStyle = 'white';\n  ctx.lineWidth = 2;\n\n  // Apply blur based on sharpness\n  const blurLevel = (100 - quality.sharpness) / 20;\n  if (blurLevel > 0) {\n    ctx.filter = `blur(${blurLevel}px)`;\n  }\n\n  // Draw lines to show contrast/sharpness\n  ctx.beginPath();\n  ctx.moveTo(50, 50);\n  ctx.lineTo(150, 50);\n  ctx.lineTo(150, 150);\n  ctx.lineTo(50, 150);\n  ctx.closePath();\n  ctx.stroke();\n\n  // Apply brightness\n  ctx.fillStyle = `rgba(255, 255, 255, ${quality.brightness / 100})`;\n  ctx.fillRect(0, 0, 200, 200);\n\n  // Apply saturation with a color overlay\n  const saturationColor = quality.saturation > 50 ? `rgba(255, 0, 0, ${(quality.saturation - 50) / 50 * 0.5})` : `rgba(128, 128, 255, ${(50 - quality.saturation) / 50 * 0.5})`;\n  ctx.fillStyle = saturationColor;\n  ctx.fillRect(0, 0, 200, 200);\n  return canvas.toDataURL('image/png');\n};\n\n/**\r\n * Generates a mock image with visual representation\r\n */\nexport const generateVisualMockImage = () => {\n  const quality = generateRandomImageQuality();\n  return {\n    id: generateId(),\n    quality,\n    dataUrl: createVisualRepresentation(quality)\n  };\n};","map":{"version":3,"names":["getRandomValue","min","max","Math","floor","random","generateId","toString","substring","generateRandomImageQuality","sharpness","brightness","noise","contrast","saturation","timestamp","Date","now","generateMockImage","id","quality","createVisualRepresentation","canvas","document","createElement","width","height","ctx","getContext","noiseLevel","fillStyle","fillRect","strokeStyle","lineWidth","blurLevel","filter","beginPath","moveTo","lineTo","closePath","stroke","saturationColor","toDataURL","generateVisualMockImage","dataUrl"],"sources":["C:/Users/jamal/OneDrive/Documents/Development/Test Projects/image-quality-analyzer/src/utils/mockImageGenerator.ts"],"sourcesContent":["import { MockImage, ImageQuality } from '../types';\r\n\r\n/**\r\n * Generates a random number between min and max (inclusive)\r\n */\r\nconst getRandomValue = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\n/**\r\n * Generates a random ID\r\n */\r\nconst generateId = (): string => {\r\n  return Math.random().toString(36).substring(2, 11);\r\n};\r\n\r\n/**\r\n * Generates random image quality properties\r\n */\r\nexport const generateRandomImageQuality = (): ImageQuality => {\r\n  return {\r\n    sharpness: getRandomValue(10, 100),\r\n    brightness: getRandomValue(20, 80),\r\n    noise: getRandomValue(0, 100),\r\n    contrast: getRandomValue(20, 100),\r\n    saturation: getRandomValue(20, 80),\r\n    timestamp: Date.now()\r\n  };\r\n};\r\n\r\n/**\r\n * Generates a mock image with random quality properties\r\n */\r\nexport const generateMockImage = (): MockImage => {\r\n  return {\r\n    id: generateId(),\r\n    quality: generateRandomImageQuality()\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a simple visual representation of image quality metrics\r\n * (This is optional and can be used to generate a visual representation)\r\n */\r\nexport const createVisualRepresentation = (quality: ImageQuality): string => {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = 200;\r\n  canvas.height = 200;\r\n  const ctx = canvas.getContext('2d');\r\n  \r\n  if (!ctx) return '';\r\n  \r\n  // Background - darker for more noise\r\n  const noiseLevel = 255 - (quality.noise * 2.55);\r\n  ctx.fillStyle = `rgb(${noiseLevel}, ${noiseLevel}, ${noiseLevel})`;\r\n  ctx.fillRect(0, 0, 200, 200);\r\n  \r\n  // Sharpness - represented by clear lines\r\n  ctx.strokeStyle = 'white';\r\n  ctx.lineWidth = 2;\r\n  \r\n  // Apply blur based on sharpness\r\n  const blurLevel = (100 - quality.sharpness) / 20;\r\n  if (blurLevel > 0) {\r\n    ctx.filter = `blur(${blurLevel}px)`;\r\n  }\r\n  \r\n  // Draw lines to show contrast/sharpness\r\n  ctx.beginPath();\r\n  ctx.moveTo(50, 50);\r\n  ctx.lineTo(150, 50);\r\n  ctx.lineTo(150, 150);\r\n  ctx.lineTo(50, 150);\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n  \r\n  // Apply brightness\r\n  ctx.fillStyle = `rgba(255, 255, 255, ${quality.brightness / 100})`;\r\n  ctx.fillRect(0, 0, 200, 200);\r\n  \r\n  // Apply saturation with a color overlay\r\n  const saturationColor = quality.saturation > 50 \r\n    ? `rgba(255, 0, 0, ${(quality.saturation - 50) / 50 * 0.5})`\r\n    : `rgba(128, 128, 255, ${(50 - quality.saturation) / 50 * 0.5})`;\r\n  \r\n  ctx.fillStyle = saturationColor;\r\n  ctx.fillRect(0, 0, 200, 200);\r\n  \r\n  return canvas.toDataURL('image/png');\r\n};\r\n\r\n/**\r\n * Generates a mock image with visual representation\r\n */\r\nexport const generateVisualMockImage = (): MockImage => {\r\n  const quality = generateRandomImageQuality();\r\n  return {\r\n    id: generateId(),\r\n    quality,\r\n    dataUrl: createVisualRepresentation(quality)\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}