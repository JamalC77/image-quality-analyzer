{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { generateVisualMockImage } from '../utils/mockImageGenerator';\nconst ImageGenerator = ({\n  onImageGenerated,\n  interval,\n  enabled\n}) => {\n  _s();\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    // Clean up previous interval if it exists\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    // Set up new interval if enabled\n    if (enabled) {\n      // Generate an initial image immediately\n      const initialImage = generateVisualMockImage();\n      onImageGenerated(initialImage);\n\n      // Set up interval for subsequent images\n      intervalRef.current = setInterval(() => {\n        const image = generateVisualMockImage();\n        onImageGenerated(image);\n      }, interval);\n    }\n\n    // Clean up on unmount or when dependencies change\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [onImageGenerated, interval, enabled]);\n\n  // No visual render - this is just a functional component\n  return null;\n};\n_s(ImageGenerator, \"AcQ1i4tD0owQ+S+iAErNNAWnC24=\");\n_c = ImageGenerator;\nexport default ImageGenerator;\nvar _c;\n$RefreshReg$(_c, \"ImageGenerator\");","map":{"version":3,"names":["useEffect","useRef","generateVisualMockImage","ImageGenerator","onImageGenerated","interval","enabled","_s","intervalRef","current","clearInterval","initialImage","setInterval","image","_c","$RefreshReg$"],"sources":["C:/Users/jamal/OneDrive/Documents/Development/Test Projects/image-quality-analyzer/src/components/ImageGenerator.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { ImageGeneratorProps } from '../types';\r\nimport { generateVisualMockImage } from '../utils/mockImageGenerator';\r\n\r\nconst ImageGenerator: React.FC<ImageGeneratorProps> = ({\r\n  onImageGenerated,\r\n  interval,\r\n  enabled\r\n}) => {\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Clean up previous interval if it exists\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n\r\n    // Set up new interval if enabled\r\n    if (enabled) {\r\n      // Generate an initial image immediately\r\n      const initialImage = generateVisualMockImage();\r\n      onImageGenerated(initialImage);\r\n\r\n      // Set up interval for subsequent images\r\n      intervalRef.current = setInterval(() => {\r\n        const image = generateVisualMockImage();\r\n        onImageGenerated(image);\r\n      }, interval);\r\n    }\r\n\r\n    // Clean up on unmount or when dependencies change\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n      }\r\n    };\r\n  }, [onImageGenerated, interval, enabled]);\r\n\r\n  // No visual render - this is just a functional component\r\n  return null;\r\n};\r\n\r\nexport default ImageGenerator; "],"mappings":";AAAA,SAAgBA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEhD,SAASC,uBAAuB,QAAQ,6BAA6B;AAErE,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,gBAAgB;EAChBC,QAAQ;EACRC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,WAAW,GAAGP,MAAM,CAAwB,IAAI,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd;IACA,IAAIQ,WAAW,CAACC,OAAO,EAAE;MACvBC,aAAa,CAACF,WAAW,CAACC,OAAO,CAAC;MAClCD,WAAW,CAACC,OAAO,GAAG,IAAI;IAC5B;;IAEA;IACA,IAAIH,OAAO,EAAE;MACX;MACA,MAAMK,YAAY,GAAGT,uBAAuB,CAAC,CAAC;MAC9CE,gBAAgB,CAACO,YAAY,CAAC;;MAE9B;MACAH,WAAW,CAACC,OAAO,GAAGG,WAAW,CAAC,MAAM;QACtC,MAAMC,KAAK,GAAGX,uBAAuB,CAAC,CAAC;QACvCE,gBAAgB,CAACS,KAAK,CAAC;MACzB,CAAC,EAAER,QAAQ,CAAC;IACd;;IAEA;IACA,OAAO,MAAM;MACX,IAAIG,WAAW,CAACC,OAAO,EAAE;QACvBC,aAAa,CAACF,WAAW,CAACC,OAAO,CAAC;QAClCD,WAAW,CAACC,OAAO,GAAG,IAAI;MAC5B;IACF,CAAC;EACH,CAAC,EAAE,CAACL,gBAAgB,EAAEC,QAAQ,EAAEC,OAAO,CAAC,CAAC;;EAEzC;EACA,OAAO,IAAI;AACb,CAAC;AAACC,EAAA,CAtCIJ,cAA6C;AAAAW,EAAA,GAA7CX,cAA6C;AAwCnD,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}